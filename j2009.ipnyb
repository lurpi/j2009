{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "aff59e5318944b48ae13615618754c32",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Plotting will appear here..."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#!/usr/bin/env python\n",
    "# coding: utf-8\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "Created on Wed Aug  7 13:39:09 2019\n",
    "\n",
    "@author: Luca Urpi\n",
    "Solve ODE as in Wijesinghe (1986) A similarity solution for coupled deformation and fluid flow in discrete fractures\n",
    "https://inis.iaea.org/search/search.aspx?orig_q=RN:22002998\n",
    "\"\"\"\n",
    "\n",
    "# General Purpose\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "from scipy.integrate import odeint\n",
    "from scipy.special import erf\n",
    "\n",
    "# Jupyter Specifics\n",
    "from IPython.display import HTML\n",
    "from ipywidgets.widgets import interact, IntSlider, FloatSlider, Layout\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "style = {'description_width': '250px'}\n",
    "slider_layout = Layout(width='99%')\n",
    "def main(flow_rate, initial_aperture, similarity_variable_max, time, Kn, b, P0 ):\n",
    "        \n",
    "    #---------------------------------------------------------------\n",
    "    #   define system of non-linear ordinary diff equation \n",
    "    #   Eq 24a and 24b from Wijesinghe (1986)\n",
    "    #---------------------------------------------------------------\n",
    "    def ode_nonlinear_W86(s, t):\n",
    "        x, y = s\n",
    "        dydt = [\n",
    "            -(t*x+12*x*x*y*y)/(4*y*y*y), # dx/dy: Change in Rabbits\n",
    "            x      # dy/dt: Change in Foxes\n",
    "        ]\n",
    "\n",
    "        return dydt\n",
    "    #---------------------------------------------------------------\n",
    "    #   define dimensionless variable\n",
    "    #   Eq 11 from Wijesinghe (1986)\n",
    "    #---------------------------------------------------------------\n",
    "    eta = np.arange(0, similarity_variable_max, 0.1) # eta = x_position/( Diffusivity * time)^1/2 ---> eta represents both evolution in time and along fracture\n",
    "                                                      # Diffusivity= (b*b*b*Kn/(24*visc)) , assuming local laminar flow bbetween plates and fracture conductivity K(b)=b*b*b/12\n",
    "    #---------------------------------------------------------------\n",
    "    #   define initial conditions of non-linear ordinary diff equation \n",
    "    #   Eq 25a and 25b from Wijesinghe (1986)\n",
    "    #---------------------------------------------------------------\n",
    "    initial_conditions = [-flow_rate/(initial_aperture*initial_aperture*initial_aperture), initial_aperture]\n",
    "    #---------------------------------------------------------------\n",
    "    #   Solve differential equation with function odeint\n",
    "    #   based on lsoda from the FORTRAN library odepack.\n",
    "    #---------------------------------------------------------------\n",
    "    solution = odeint(ode_nonlinear_W86, initial_conditions, eta)\n",
    "    #---------------------------------------------------------------\n",
    "    #   Compute pressure and opening (with dimensions)\n",
    "    #   assuming the fluid is water at T=293K (relevant for viscosity)\n",
    "    #---------------------------------------------------------------\n",
    "    # initialize arrays\n",
    "    x_pos=[] \n",
    "    opening=[]\n",
    "    pressure=[]\n",
    "    # mechanical and hydraulical parameters read from slider\n",
    "    visc=1.e-3\n",
    "    Df=Kn*1e9*b*b*b/(1e18*24.*visc)\n",
    "    Lt=np.sqrt(Df*time)     #constant L(t) = sqrt[ (b*b*b*Kn/(24*visc))) * t]\n",
    "    for i in range(len(eta)):\n",
    "\n",
    "        x_pos.append(eta[i]*Lt)\n",
    "        opening.append((solution[:, 1][i])*b)\n",
    "        pressure.append(P0+(solution[:, 1][i]-1)*b*Kn*1.e-3)\n",
    "\n",
    "    #Graphic details\n",
    "\n",
    "    fig, axes = plt.subplots(1, 3, figsize=(15, 6))\n",
    "\n",
    "    #---------------------------------------------------------------\n",
    "    #   Plot dimensionless solution \n",
    "    #   Fig.2 from Wijesinghe (1986)\n",
    "    #---------------------------------------------------------------\n",
    "    ax=axes[0]\n",
    "    ax.plot(eta[::3], solution[:, 1][::3], label='w_2(eta)')\n",
    "    ax.set_xlim([0, 30])\n",
    "    ax.set_ylim([0, 2])\n",
    "    ax.set_xlabel(r'$\\eta$', fontsize=14)\n",
    "    ax.legend(loc='best')\n",
    "    ax.grid()\n",
    "    ax.set_title(r\"Adimensional solution\", fontsize=18)\n",
    "\n",
    "    #---------------------------------------------------------------\n",
    "    # plot opening profile along fracture at t= time\n",
    "    # eta = x_position/( Diffusivity * time)^1/2\n",
    "    #---------------------------------------------------------------\n",
    "    ax=axes[1]\n",
    "    \n",
    "    ax.plot(x_pos, opening, label='time %d s' %time)   \n",
    "    ax.set_xlim([0, 30])\n",
    "    ax.set_xlabel('Distance from injection along fracture (m)', fontsize=14)\n",
    "    ax.set_ylabel(r'Opening ($\\mu$m)', fontsize=14)\n",
    "    ax.set_title(r\"Opening profile\", fontsize=18)\n",
    "    axes[1].legend(loc='best')\n",
    "    axes[1].grid()\n",
    "\n",
    "    #---------------------------------------------------------------\n",
    "    # plot pressure along fracture at t= time\n",
    "    #---------------------------------------------------------------\n",
    "    ax=axes[2]\n",
    "\n",
    "    ax.plot(x_pos, pressure, label='time %d s' %time)\n",
    "    ax.set_xlabel('Distance from injection along fracture (m)', fontsize=14)\n",
    "    ax.set_ylabel('Pressure (MPa)', fontsize=14)\n",
    "    ax.legend(loc='best')    \n",
    "    ax.set_xlim([0, 30])\n",
    "    ax.grid()\n",
    "    ax.set_title(r\"Pressure profile\", fontsize=18)\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    plt.subplots_adjust(right=0.94, hspace=0.115,wspace=0.295)\n",
    "\n",
    "    plt.show()\n",
    "\n",
    "interact(main, \n",
    "               flow_rate=FloatSlider(min=0.01 , max=3.0, step=0.01, value=0.723589728, description='Flow rate (dimensionless)', style=style, layout=slider_layout),\n",
    "               initial_aperture=FloatSlider(min=0 , max=50, step=1e-1, value=1.9, description='Initial aperture (dimensionless)', style=style, layout=slider_layout),\n",
    "               similarity_variable_max=FloatSlider(min=0 ,max=1000 , step=5, value=500, description=r'Max adimensional variable $\\eta$', style=style, layout=slider_layout),\n",
    "               time=FloatSlider(min=0.1 ,max=10000 , step=50, value=500, description=r'Time (s)', style=style, layout=slider_layout),\n",
    "               Kn=FloatSlider(min=5 ,max=5000 , step=5, value=100, description=r'Fracture normal stiffness (GPa/m)', style=style, layout=slider_layout),\n",
    "               b=FloatSlider(min=0.1 ,max=1000 , step=5, value=10, description=r'Initial fracture opening ($\\mu$m)', style=style, layout=slider_layout),\n",
    "               P0=FloatSlider(min=1 ,max=100 , step=1, value=11, description=r'Initial fracture pressure (MPa)', style=style, layout=slider_layout)\n",
    "        );\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
